{"ast":null,"code":"import axios from 'axios';\nimport { FETCH_COUNTRIES_SUCCESS, FETCH_COUNTRIES_FAILURE, FETCH_COUNTRIES_LOADING } from '../../types'; //fetch all countries\n\nexport function fetchAllCountriesLoading() {\n  return {\n    type: FETCH_COUNTRIES_LOADING\n  };\n} // fetch all countries success\n\nexport function fetchAllCountriesSuccess(countries) {\n  return {\n    type: FETCH_COUNTRIES_SUCCESS,\n    payload: countries\n  };\n} // fetch all countries failure\n\nexport function fetchAllCountriesFailure(error) {\n  return {\n    type: FETCH_COUNTRIES_FAILURE,\n    payload: error\n  };\n} // fetch countries data\n\nexport function fetchAllCountries() {\n  return dispatch => {\n    dispatch(fetchAllCountriesLoading()); //axios call \n\n    axios.get('https://restcountries.com/v2/all').then(res => {\n      const countries = res.data;\n      dispatch(fetchAllCountriesSuccess(countries));\n    }).catch(err => {\n      dispatch(fetchAllCountriesFailure(err));\n    });\n  };\n}","map":{"version":3,"sources":["/Users/muradnerimanli/Desktop/Projects/QITTask/src/redux/actions/CountryAction.ts"],"names":["axios","FETCH_COUNTRIES_SUCCESS","FETCH_COUNTRIES_FAILURE","FETCH_COUNTRIES_LOADING","fetchAllCountriesLoading","type","fetchAllCountriesSuccess","countries","payload","fetchAllCountriesFailure","error","fetchAllCountries","dispatch","get","then","res","data","catch","err"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAAQC,uBAAR,EAAiDC,uBAAjD,EAA0EC,uBAA1E,QAAwG,aAAxG,C,CAEA;;AACA,OAAO,SAASC,wBAAT,GAAkD;AAErD,SAAO;AACHC,IAAAA,IAAI,EAACF;AADF,GAAP;AAIH,C,CAED;;AACA,OAAO,SAASG,wBAAT,CAAkCC,SAAlC,EAA8D;AACjE,SAAO;AACHF,IAAAA,IAAI,EAACJ,uBADF;AAEHO,IAAAA,OAAO,EAACD;AAFL,GAAP;AAKH,C,CAED;;AACA,OAAO,SAASE,wBAAT,CAAkCC,KAAlC,EAA8D;AACjE,SAAO;AACHL,IAAAA,IAAI,EAACH,uBADF;AAEHM,IAAAA,OAAO,EAACE;AAFL,GAAP;AAKH,C,CAED;;AAEA,OAAO,SAASC,iBAAT,GAA4B;AAE/B,SAAQC,QAAD,IAAqB;AAIxBA,IAAAA,QAAQ,CAACR,wBAAwB,EAAzB,CAAR,CAJwB,CAKxB;;AACAJ,IAAAA,KAAK,CAACa,GAAN,CAAU,kCAAV,EACCC,IADD,CACOC,GAAD,IAAO;AACT,YAAMR,SAAS,GAACQ,GAAG,CAACC,IAApB;AACAJ,MAAAA,QAAQ,CAACN,wBAAwB,CAACC,SAAD,CAAzB,CAAR;AACH,KAJD,EAIGU,KAJH,CAIUC,GAAD,IAAO;AACZN,MAAAA,QAAQ,CAACH,wBAAwB,CAACS,GAAD,CAAzB,CAAR;AAEH,KAPD;AAQH,GAdD;AAiBH","sourcesContent":["import {Dispatch} from 'redux'\nimport axios from 'axios'\n\nimport {FETCH_COUNTRIES_SUCCESS, CountryActions, FETCH_COUNTRIES_FAILURE, FETCH_COUNTRIES_LOADING} from '../../types'\n\n//fetch all countries\nexport function fetchAllCountriesLoading():CountryActions{\n\n    return {\n        type:FETCH_COUNTRIES_LOADING\n    }\n\n}\n\n// fetch all countries success\nexport function fetchAllCountriesSuccess(countries:[]):CountryActions{\n    return {\n        type:FETCH_COUNTRIES_SUCCESS,\n        payload:countries\n    }\n\n}\n\n// fetch all countries failure\nexport function fetchAllCountriesFailure(error:string):CountryActions{\n    return {\n        type:FETCH_COUNTRIES_FAILURE,\n        payload:error\n        \n    }\n}\n\n// fetch countries data\n\nexport function fetchAllCountries(){\n\n    return (dispatch:Dispatch)=>{\n\n       \n\n        dispatch(fetchAllCountriesLoading())\n        //axios call \n        axios.get('https://restcountries.com/v2/all')\n        .then((res)=>{\n            const countries=res.data \n            dispatch(fetchAllCountriesSuccess(countries))\n        }).catch((err)=>{\n            dispatch(fetchAllCountriesFailure(err))\n\n        })\n    }\n\n    \n}"]},"metadata":{},"sourceType":"module"}